reate and deploy the Lambda function using the AWS Management Console with the following details.

Use the option of "Author from scratch".
Provide the name lambda-saa.
Use the runtime as python 3.11 and architecture of x86_64.

Note: Create the resources only in us-east-1 region.
=========

In the AWS Management Console, search for and select the "Lambda" service.
Click on "Create function" to start creating a new Lambda function.
In the "Create function" page, choose the "Author from scratch" option.
Function Name: Enter "lambda-saa" as the name for your Lambda function.
Runtime: Select "Python 3.11" as the runtime for your function.
Architecture: Choose "x86_64" as the architecture.

=======
You are an AWS developer preparing a Lambda function named lambda-saa for a Solution Architect exam. The initial function was created with default code, and you need to update it to provide a personalized greeting based on user input. Additionally, you need to test the function.

Update Lambda Function Code:

Replace the function's code with the following and deploy it:
import json

def lambda_handler(event, context):
    # Check if the event contains a 'name' parameter
    if 'name' in event:
        name = event['name']
        greeting = f"Hello, {name}! All the best for your Solution Architect exam!"
    else:
        greeting = "Hello! All the best for your Solution Architect exam!"

    response = {
        'statusCode': 200,
        'body': json.dumps(greeting)
    }

    return response

Configure Test Event:

Under the "Test" tab of the Lambda function, enter "Test" as the Event Name.
Copy the following input data and paste it into the "Event JSON" block. Save the test event.
{
  "name": "Your Name"
}

After saving the input variables, click the "Test" button. You will see the status of the log in the test block itself. Click on the status to view the output.
Invoke the function using CLI

Run the following AWS CLI command in your terminal to invoke the Lambda function.
aws lambda invoke --function-name lambda-saa --invocation-type RequestResponse --payload '{"name": "Your Name"}' output.txt


Note: Replace "Your Name" with the desired name.

========

CloudWatch provides various metrics, logs, and alarms to help you monitor and troubleshoot your Lambda functions effectively. Here's an overview of Lambda monitoring with CloudWatch:

CloudWatch Metrics:
Invocations: The total number of times the function is invoked.
Errors: The number of failed invocations.
Duration: The time taken for function execution.
ConcurrentExecutions: The number of concurrent executions at any given time.
UnreservedConcurrentExecutions: Remaining concurrency capacity (available concurrency) for a function.
MemoryUsed: The amount of memory used during function execution.
MemoryLimit: The configured memory limit for the function.
CloudWatch Logs:
CloudWatch Logs allow you to capture and store logs generated by your Lambda function. You can include log statements in your Lambda code to record relevant information, errors, and debugging details. Logs can be viewed and analyzed in the CloudWatch Logs Console.

From the "Monitor" tab in the function dashboard, you can review the CloudWatch metrics, logs, and alarms related to the lambda-saa Lambda function.


=====

Scalability in AWS Lambda refers to the ability of a Lambda function to automatically handle increased workloads by automatically provisioning and managing the necessary compute resources.
We already have the lambda function lambda-saa created.
For this step, test the scalability of the Lambda function by invoking it ten times. You can use the following command for invoking the function multiple times concurrently.

for i in {1..10}; do aws lambda invoke --function-name lambda-saa --payload '{"name": "KodeKloud"}' outputfile$i.txt & done; wait

Note: Save the output of the lambda function to outputfile(N).txt. Replace (N) with the invocation number.

What metrics should you consider when testing the scalability of a Lambda function?
Invocation count, duration, and errors are most important metrics to consider when testing the scalability of a Lambda function.
===
We have invoked the function multiple times, and you can verify these invocations by reviewing the CloudWatch logs. Please examine the CloudWatch metrics associated with the Lambda function's scalability, which include metrics such as the invocation count, execution duration, and error rates.


We have gained insights into how Lambda scales in response to invocation traffic.

To prevent incurring further charges, please proceed with the deletion of the Lambda function.

For this step, delete the function lambda-saa that was created previously.













Example: If you are invoking function for secondtime, save output to outputfile2.txt.
